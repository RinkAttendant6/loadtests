// Code generated by protoc-gen-go.
// source: pb/scheduler.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/scheduler.proto

It has these top-level messages:
	LoadTestReq
	LoadTestResp
*/
package pb

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type LoadTestReq struct {
}

func (m *LoadTestReq) Reset()         { *m = LoadTestReq{} }
func (m *LoadTestReq) String() string { return proto.CompactTextString(m) }
func (*LoadTestReq) ProtoMessage()    {}

type LoadTestResp struct {
}

func (m *LoadTestResp) Reset()         { *m = LoadTestResp{} }
func (m *LoadTestResp) String() string { return proto.CompactTextString(m) }
func (*LoadTestResp) ProtoMessage()    {}

// Client API for Scheduler service

type SchedulerClient interface {
	LoadTest(ctx context.Context, in *LoadTestReq, opts ...grpc.CallOption) (Scheduler_LoadTestClient, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) LoadTest(ctx context.Context, in *LoadTestReq, opts ...grpc.CallOption) (Scheduler_LoadTestClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Scheduler_serviceDesc.Streams[0], c.cc, "/.Scheduler/LoadTest", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerLoadTestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_LoadTestClient interface {
	Recv() (*LoadTestResp, error)
	grpc.ClientStream
}

type schedulerLoadTestClient struct {
	grpc.ClientStream
}

func (x *schedulerLoadTestClient) Recv() (*LoadTestResp, error) {
	m := new(LoadTestResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	LoadTest(*LoadTestReq, Scheduler_LoadTestServer) error
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_LoadTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadTestReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).LoadTest(m, &schedulerLoadTestServer{stream})
}

type Scheduler_LoadTestServer interface {
	Send(*LoadTestResp) error
	grpc.ServerStream
}

type schedulerLoadTestServer struct {
	grpc.ServerStream
}

func (x *schedulerLoadTestServer) Send(m *LoadTestResp) error {
	return x.ServerStream.SendMsg(m)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadTest",
			Handler:       _Scheduler_LoadTest_Handler,
			ServerStreams: true,
		},
	},
}
