// Code generated by protoc-gen-go.
// source: pb/scheduler.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/scheduler.proto

It has these top-level messages:
	LoadTestReq
	LoadTestResp
	RegisterExecutorReq
	RegisterExecutorResp
*/
package pb

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type LoadTestReq struct {
	Url                       string  `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Script                    string  `protobuf:"bytes,2,opt,name=script" json:"script,omitempty"`
	ScriptName                string  `protobuf:"bytes,3,opt,name=script_name" json:"script_name,omitempty"`
	RunTime                   int32   `protobuf:"varint,4,opt,name=run_time" json:"run_time,omitempty"`
	MaxWorkers                int32   `protobuf:"varint,6,opt,name=max_workers" json:"max_workers,omitempty"`
	GrowthFactor              float64 `protobuf:"fixed64,8,opt,name=growth_factor" json:"growth_factor,omitempty"`
	TimeBetweenGrowth         float64 `protobuf:"fixed64,9,opt,name=time_between_growth" json:"time_between_growth,omitempty"`
	StartingRequestsPerSecond int32   `protobuf:"varint,10,opt,name=starting_requests_per_second" json:"starting_requests_per_second,omitempty"`
	MaxRequestsPerSecond      int32   `protobuf:"varint,11,opt,name=max_requests_per_second" json:"max_requests_per_second,omitempty"`
}

func (m *LoadTestReq) Reset()         { *m = LoadTestReq{} }
func (m *LoadTestReq) String() string { return proto.CompactTextString(m) }
func (*LoadTestReq) ProtoMessage()    {}

type LoadTestResp struct {
	Preparing *LoadTestResp_Preparing `protobuf:"bytes,1,opt,name=preparing" json:"preparing,omitempty"`
	Start     *LoadTestResp_Started   `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	Finish    *LoadTestResp_Finished  `protobuf:"bytes,3,opt,name=finish" json:"finish,omitempty"`
	Error     *LoadTestResp_Errored   `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *LoadTestResp) Reset()         { *m = LoadTestResp{} }
func (m *LoadTestResp) String() string { return proto.CompactTextString(m) }
func (*LoadTestResp) ProtoMessage()    {}

func (m *LoadTestResp) GetPreparing() *LoadTestResp_Preparing {
	if m != nil {
		return m.Preparing
	}
	return nil
}

func (m *LoadTestResp) GetStart() *LoadTestResp_Started {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *LoadTestResp) GetFinish() *LoadTestResp_Finished {
	if m != nil {
		return m.Finish
	}
	return nil
}

func (m *LoadTestResp) GetError() *LoadTestResp_Errored {
	if m != nil {
		return m.Error
	}
	return nil
}

type LoadTestResp_Preparing struct {
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *LoadTestResp_Preparing) Reset()         { *m = LoadTestResp_Preparing{} }
func (m *LoadTestResp_Preparing) String() string { return proto.CompactTextString(m) }
func (*LoadTestResp_Preparing) ProtoMessage()    {}

type LoadTestResp_Started struct {
}

func (m *LoadTestResp_Started) Reset()         { *m = LoadTestResp_Started{} }
func (m *LoadTestResp_Started) String() string { return proto.CompactTextString(m) }
func (*LoadTestResp_Started) ProtoMessage()    {}

type LoadTestResp_Finished struct {
}

func (m *LoadTestResp_Finished) Reset()         { *m = LoadTestResp_Finished{} }
func (m *LoadTestResp_Finished) String() string { return proto.CompactTextString(m) }
func (*LoadTestResp_Finished) ProtoMessage()    {}

type LoadTestResp_Errored struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *LoadTestResp_Errored) Reset()         { *m = LoadTestResp_Errored{} }
func (m *LoadTestResp_Errored) String() string { return proto.CompactTextString(m) }
func (*LoadTestResp_Errored) ProtoMessage()    {}

type RegisterExecutorReq struct {
	DropletId int64 `protobuf:"varint,1,opt,name=droplet_id" json:"droplet_id,omitempty"`
	Port      int64 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *RegisterExecutorReq) Reset()         { *m = RegisterExecutorReq{} }
func (m *RegisterExecutorReq) String() string { return proto.CompactTextString(m) }
func (*RegisterExecutorReq) ProtoMessage()    {}

type RegisterExecutorResp struct {
	InfluxAddr     string `protobuf:"bytes,1,opt,name=influx_addr" json:"influx_addr,omitempty"`
	InfluxUsername string `protobuf:"bytes,2,opt,name=influx_username" json:"influx_username,omitempty"`
	InfluxPassword string `protobuf:"bytes,3,opt,name=influx_password" json:"influx_password,omitempty"`
	InfluxDb       string `protobuf:"bytes,4,opt,name=influx_db" json:"influx_db,omitempty"`
	InfluxSsl      bool   `protobuf:"varint,5,opt,name=influx_ssl" json:"influx_ssl,omitempty"`
}

func (m *RegisterExecutorResp) Reset()         { *m = RegisterExecutorResp{} }
func (m *RegisterExecutorResp) String() string { return proto.CompactTextString(m) }
func (*RegisterExecutorResp) ProtoMessage()    {}

// Client API for Scheduler service

type SchedulerClient interface {
	LoadTest(ctx context.Context, in *LoadTestReq, opts ...grpc.CallOption) (Scheduler_LoadTestClient, error)
	RegisterExecutor(ctx context.Context, in *RegisterExecutorReq, opts ...grpc.CallOption) (*RegisterExecutorResp, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) LoadTest(ctx context.Context, in *LoadTestReq, opts ...grpc.CallOption) (Scheduler_LoadTestClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Scheduler_serviceDesc.Streams[0], c.cc, "/.Scheduler/LoadTest", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerLoadTestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_LoadTestClient interface {
	Recv() (*LoadTestResp, error)
	grpc.ClientStream
}

type schedulerLoadTestClient struct {
	grpc.ClientStream
}

func (x *schedulerLoadTestClient) Recv() (*LoadTestResp, error) {
	m := new(LoadTestResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) RegisterExecutor(ctx context.Context, in *RegisterExecutorReq, opts ...grpc.CallOption) (*RegisterExecutorResp, error) {
	out := new(RegisterExecutorResp)
	err := grpc.Invoke(ctx, "/.Scheduler/RegisterExecutor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	LoadTest(*LoadTestReq, Scheduler_LoadTestServer) error
	RegisterExecutor(context.Context, *RegisterExecutorReq) (*RegisterExecutorResp, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_LoadTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadTestReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).LoadTest(m, &schedulerLoadTestServer{stream})
}

type Scheduler_LoadTestServer interface {
	Send(*LoadTestResp) error
	grpc.ServerStream
}

type schedulerLoadTestServer struct {
	grpc.ServerStream
}

func (x *schedulerLoadTestServer) Send(m *LoadTestResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_RegisterExecutor_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RegisterExecutorReq)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(SchedulerServer).RegisterExecutor(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterExecutor",
			Handler:    _Scheduler_RegisterExecutor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadTest",
			Handler:       _Scheduler_LoadTest_Handler,
			ServerStreams: true,
		},
	},
}
