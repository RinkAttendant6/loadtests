// Code generated by protoc-gen-go.
// source: pb/executor.proto
// DO NOT EDIT!

/*
Package executorGRPC is a generated protocol buffer package.

It is generated from these files:
	pb/executor.proto

It has these top-level messages:
	StatusMessage
	CommandMessage
	ScriptParams
*/
package executorGRPC

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type StatusMessage struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *StatusMessage) Reset()         { *m = StatusMessage{} }
func (m *StatusMessage) String() string { return proto.CompactTextString(m) }
func (*StatusMessage) ProtoMessage()    {}

type CommandMessage struct {
	Command      string        `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	ScriptParams *ScriptParams `protobuf:"bytes,2,opt,name=script_params" json:"script_params,omitempty"`
}

func (m *CommandMessage) Reset()         { *m = CommandMessage{} }
func (m *CommandMessage) String() string { return proto.CompactTextString(m) }
func (*CommandMessage) ProtoMessage()    {}

func (m *CommandMessage) GetScriptParams() *ScriptParams {
	if m != nil {
		return m.ScriptParams
	}
	return nil
}

type ScriptParams struct {
	Url                       string  `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Script                    string  `protobuf:"bytes,2,opt,name=script" json:"script,omitempty"`
	ScriptId                  string  `protobuf:"bytes,3,opt,name=script_id" json:"script_id,omitempty"`
	RunTime                   int32   `protobuf:"varint,4,opt,name=run_time" json:"run_time,omitempty"`
	MaxWorkers                int32   `protobuf:"varint,6,opt,name=max_workers" json:"max_workers,omitempty"`
	GrowthFactor              float64 `protobuf:"fixed64,8,opt,name=growth_factor" json:"growth_factor,omitempty"`
	TimeBetweenGrowth         float64 `protobuf:"fixed64,9,opt,name=time_between_growth" json:"time_between_growth,omitempty"`
	StartingRequestsPerSecond int32   `protobuf:"varint,10,opt,name=starting_requests_per_second" json:"starting_requests_per_second,omitempty"`
	MaxRequestsPerSecond      int32   `protobuf:"varint,11,opt,name=max_requests_per_second" json:"max_requests_per_second,omitempty"`
}

func (m *ScriptParams) Reset()         { *m = ScriptParams{} }
func (m *ScriptParams) String() string { return proto.CompactTextString(m) }
func (*ScriptParams) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Commander service

type CommanderClient interface {
	ExecuteCommand(ctx context.Context, opts ...grpc.CallOption) (Commander_ExecuteCommandClient, error)
}

type commanderClient struct {
	cc *grpc.ClientConn
}

func NewCommanderClient(cc *grpc.ClientConn) CommanderClient {
	return &commanderClient{cc}
}

func (c *commanderClient) ExecuteCommand(ctx context.Context, opts ...grpc.CallOption) (Commander_ExecuteCommandClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Commander_serviceDesc.Streams[0], c.cc, "/executorGRPC.Commander/ExecuteCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &commanderExecuteCommandClient{stream}
	return x, nil
}

type Commander_ExecuteCommandClient interface {
	Send(*CommandMessage) error
	Recv() (*StatusMessage, error)
	grpc.ClientStream
}

type commanderExecuteCommandClient struct {
	grpc.ClientStream
}

func (x *commanderExecuteCommandClient) Send(m *CommandMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commanderExecuteCommandClient) Recv() (*StatusMessage, error) {
	m := new(StatusMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Commander service

type CommanderServer interface {
	ExecuteCommand(Commander_ExecuteCommandServer) error
}

func RegisterCommanderServer(s *grpc.Server, srv CommanderServer) {
	s.RegisterService(&_Commander_serviceDesc, srv)
}

func _Commander_ExecuteCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommanderServer).ExecuteCommand(&commanderExecuteCommandServer{stream})
}

type Commander_ExecuteCommandServer interface {
	Send(*StatusMessage) error
	Recv() (*CommandMessage, error)
	grpc.ServerStream
}

type commanderExecuteCommandServer struct {
	grpc.ServerStream
}

func (x *commanderExecuteCommandServer) Send(m *StatusMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commanderExecuteCommandServer) Recv() (*CommandMessage, error) {
	m := new(CommandMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Commander_serviceDesc = grpc.ServiceDesc{
	ServiceName: "executorGRPC.Commander",
	HandlerType: (*CommanderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteCommand",
			Handler:       _Commander_ExecuteCommand_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
